[
  {
    "name": "double1",
    "description": "Write a function with one `number` argument that returns double the argument.",
    "assertions": [
      { "input": [3], "output": 6 },
      { "input": [0], "output": 0 },
      { "input": [-42], "output": -84 }
    ]
  },
  {
    "name": "double2",
    "description": "Write a function with two `number` arguments that returns double the first argument.",
    "assertions": [
      { "input": [3, 8], "output": 6 },
      { "input": [0, 5], "output": 0 },
      { "input": [-42, 22], "output": -84 }
    ]
  },
  {
    "name": "double3",
    "description": "Write a function with two `number` arguments that returns double the largest argument.",
    "assertions": [
      { "input": [3, 8], "output": 16 },
      { "input": [5, 10], "output": 20 },
      { "input": [-42, 22], "output": 44 },
      { "input": [-42, -22], "output": -44 }
    ]
  },
  {
    "name": "repeat",
    "description": "Write a function with a `string` argument and a `number` argument that repeates the string from the first argument but repeated the amount of times equal to the second argument. If the second number is negative, return an empty string.",
    "assertions": [
      { "input": ["a", 5], "output": "aaaaa" },
      { "input": ["aloha", 2], "output": "alohaaloha" },
      { "input": ["b", -1], "output": "" }
    ]
  },
  {
    "name": "batman",
    "description": "Write a function without any arguments. Have it return the string `'na'` repeated 10 times followed by the string `' batman!'`. Use the `repeat` function you used before to accomplish this.",
    "assertions": [{ "input": null, "output": "nananananananananana batman" }]
  },
  {
    "name": "max",
    "description": "Write a function with two `number` arguments. Have it return the largest number of the two.",
    "assertions": [
      { "input": [10, 5], "output": 10 },
      { "input": [-10, 50], "output": 50 },
      { "input": [-10, -50], "output": -10 }
    ]
  },
  {
    "name": "maxDivide",
    "description": "Write a function with two `number` arguments. Have it return the smallest number of the two divided by the largest number.",
    "assertions": [
      { "input": [10, 5], "output": 0.5 },
      { "input": [-10, 50], "output": -0.2 },
      { "input": [-10, -50], "output": 0.2 }
    ]
  },
  {
    "name": "maxStr",
    "description": "Write a function with two `string` arguments. Have it return the longest string.",
    "assertions": [
      { "input": ["aaaaa", "a"], "output": "aaaaa" },
      { "input": ["aa", "b"], "output": "aa" },
      { "input": ["aa", "bb"], "output": "aa" }
    ]
  },
  {
    "name": "even",
    "description": "Write a function with a single `number` argument. Return a boolean that indicated wether this number is even.",
    "tips": [
      "use the `%`(remainder) operator to determine if something is divisible by something else. Read about it [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)."
    ],
    "assertions": [
      { "input": [12], "output": true },
      { "input": [13], "output": false },
      { "input": [-2], "output": true }
    ]
  },
  {
    "name": "evenBelow",
    "description": "Write a function with a single `number` argument. Return an array of all the numbers lower than this argument that are even.",
    "assertions": [
      { "input": [12], "output": [0, 2, 4, 6, 8, 10] },
      { "input": [-20], "output": [] }
    ]
  },
  {
    "name": "evenIn",
    "description": "Write a function with a single `array of numbers` argument. Return an array of all the numbers in this array that are even.",
    "assertions": [
      { "input": [0, 2, 4, 6, 8, 10], "output": [0, 2, 4, 6, 8, 10] },
      { "input": [0, 2, 4, 6, 8, 10, 33], "output": [0, 2, 4, 6, 8, 10] },
      { "input": [1, 3, 4, 6, 8, 10, 33], "output": [4, 6, 8, 10] }
    ]
  },
  {
    "name": "multiplyArray",
    "description": "Write a function with a single `array of numbers` argument. Return the result of multiplying all the numbers. If the input contains just 1 number, return that number.",
    "assertions": [
      { "input": [0, 2, 4], "output": 0 },
      { "input": [-1, 4, 8], "output": -32 },
      { "input": [8], "output": [8] }
    ]
  },
  {
    "name": "divideArray",
    "description": "Write a function with a single `array of numbers` argument. Return the result of dividing the number from left to right. So the first number gets divided by the second and the result of that gets divided by the third (and so on..). If the array contains a zero, return zero. If the array contains just one number, return that number.",
    "assertions": [
      { "input": [0, 2, 4], "output": 0 },
      { "input": [16, 8, 2], "output": 1 },
      { "input": [16, -8, 2], "output": -1 },
      { "input": [8], "output": [8] }
    ]
  },
  {
    "name": "splitCombine",
    "description": "Write a function with two `string` arguments. Split both strings in halves and recombine the halves. Return the longest results of the two combinations (or the first one if both have the same length).",
    "assertions": [{ "input": ["babe", "bibo"], "output": "babo" }]
  },
  {
    "name": "getName",
    "description": "Write a function with one `{name: string}` argument. Return the name property.",
    "assertions": [
      { "input": { "name": "Blibo" }, "output": "blibo" },
      { "input": { "name": "Blobao", "age": 25 }, "output": "Blobao" }
    ]
  },
  {
    "name": "getNames",
    "description": "Write a function with one `[{name: string}]`(list of object) argument. Return an array with all the name properties.",
    "assertions": [
      { "input": [{ "name": "Blibo" }], "output": ["blibo"] },
      {
        "input": [{ "name": "Blibo" }, { "name": "Blobao", "age": 25 }],
        "output": ["Blibo", "Blobao"]
      }
    ]
  },
  {
    "name": "combineName",
    "description": "Write a function with one `[{firstname: string, lastname: string}]`(list of object) argument. Return an array with all the full names (both the first and the last name as a single string with a space in between them).",
    "assertions": [
      {
        "input": [
          { "firstname": "Blibo", "lastname": "Blaggins" },
          { "name": "Blobao", "lastname": "Bloaggins", "age": 25 }
        ],
        "output": ["Blibo Blaggins", "Blobao Bloaggins"]
      }
    ]
  },
  {
    "name": "uniqueCountries",
    "description": "Write a function with one `[{country: string}]`(list of object) argument. Return an array with every unique country value in the input array.",
    "assertions": [
      {
        "input": [
          { "country": "The Netherlands" },
          { "country": "Belgium" },
          { "country": "Luxembourg" }
        ],
        "output": ["The Netherlands", "Belgium", "Luxembourg"]
      },
      {
        "input": [
          { "country": "The Netherlands" },
          { "country": "Belgium" },
          { "country": "Luxembourg" },
          { "country": "Belgium" }
        ],
        "output": ["The Netherlands", "Belgium", "Luxembourg"]
      },
      {
        "input": [],
        "output": []
      }
    ]
  },
  {
    "name": "countCountries",
    "description": "Write a function with one `[{country: string}]`(list of object) argument. Return an object with all the unique values as keys and the amount of occurences as value.",
    "assertions": [
      {
        "input": [
          { "country": "The Netherlands" },
          { "country": "Belgium" },
          { "country": "Luxembourg" },
          { "country": "Belgium" },
          { "country": "Luxembourg" },
          { "country": "Luxembourg" }
        ],
        "output": { "The Netherlands": 1, "Belgium": 2, "Luxembourg": 3 }
      }
    ]
  },
  {
    "name": "highestNumber",
    "description": "Write a function with one `[number]` argument. Return the highest number.",
    "assertions": [
      { "input": [5], "output": 5 },
      { "input": [5, -5, 10, -100], "output": 20 }
    ]
  },
  {
    "name": "average",
    "description": "Write a function with one `[number]` argument. Return the average."
  },
  {
    "name": "mode",
    "description": "Write a function with one `[number]` argument. Return the mode (most frequent value)."
  },
  {
    "name": "reverse",
    "description": "Write a function with one `string` argument. Return the reversed string."
  },
  {
    "name": "palindrome",
    "description": "Write a function with one `string` argument. Return true or false wether this string is a palindrome.",
    "tips": [
      "A palindrome is a string that stays the same when you reverse it. Like 'Bob' or 'Racecar'."
    ]
  },
  {
    "name": "pyramid",
    "description": "Write a function with one `number` argument. Have it log a pyramid of that size."
  },
  {
    "name": "array_intersect",
    "description": "Write a function that takes two `[number]` arguments and return an array that contains all numers that are in both arrays."
  },
  {
    "name": "key_intersect",
    "description": "Write a function that takes two `{key:value} (objects)` arguments and return an array that contains all the keys that are in both objects."
  },
  {
    "name": "value_intersect",
    "description": "Write a function that takes two `{key:value} (objects)` arguments and return an array that contains all the values that are in both objects."
  },
  {
    "name": "intersect",
    "description": "Write a function that takes two `{key:value} (objects)` arguments and return an array that contains all the keys that are in both object which have the same value."
  },
  {
    "name": "difference",
    "description": "Write a function that takes two `{key:value} (objects)` arguments and return an array that contains all the keys that are only in one of the two objects."
  },
  {
    "name": "evenIds",
    "description": "Write a function that takes a `[{}] (array of objects)` argument, every object will have an `id` key (which is a number). Return an array with all the objects having a even number as key."
  },
  {
    "name": "destroyLongestArrays",
    "description": "Write a function that takes a `[[]] (array of arrays)` argument, remove the longest array and return the result. If there are multiple array that are the longest, remove both."
  },
  {
    "name": "togglePower",
    "description": "Write a function that takes a `[{id:number, power:boolean}] (array of objects)` and a `number` argument. Toggle the `power` bool from false to true or from true to false if the id matches the second argument and return the result."
  },
  {
    "name": "reverseSentence",
    "description": "Write a function that takes a `string`. Return the string with the seperate words in the reverse order.",
    "examples": [
      "reverseSentence(\"We are Codaisseur\") === \"Codaisseur are we\" // this is true"
    ]
  },
  {
    "name": "numberPalindrome",
    "description": "Write a function that takes a `number`. Return a boolean if the number stays the same when reverted."
  }
]
